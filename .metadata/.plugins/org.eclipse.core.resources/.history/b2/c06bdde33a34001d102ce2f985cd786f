package com.bookservice.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.bookservice.entity.Book;
import com.bookservice.entity.PurchasedBooks;
import com.bookservice.entity.Reader;
import com.bookservice.repository.BookRepository;
import com.bookservice.repository.PurchasedBookRepository;
import com.bookservice.repository.ReaderRepository;
import com.bookservice.request.BuyBookRequest;

@CrossOrigin
@RestController
@RequestMapping("/digitalbooks")
public class ReaderController extends BaseController {
	@Autowired ReaderRepository readerRepository;
	@Autowired BookRepository bookRepository;
	@Autowired PurchasedBookRepository purchasedBookRepository;
	static Random random = new Random();
	/**
	 * Reader can buy a book 
	 * @param buybookrequest
	 * @return
	 */
	@PostMapping("/books/buy")
	ResponseEntity<String> buyBooks(@Valid @RequestBody BuyBookRequest buybookrequest){
		if(bookRepository.existsById(buybookrequest.getBookid())){
			Reader reader;
			Optional<Reader> reader1= readerRepository.findByReadernameAndReaderemail(buybookrequest.getReadername(),buybookrequest.getReaderemail());
			Optional<Reader> reader2= readerRepository.findByReadernameOrReaderemail(buybookrequest.getReadername(),buybookrequest.getReaderemail());
			if(reader1.isPresent()) {
				
				if(false) {
//				if(!reader1.get().getPurchasedbooks().contains(""+buybookrequest.getBookid())) {
//					String paymentid=buybook(reader1.get(),buybookrequest.getBookid());
//					buybookrequest.setPaymentid(paymentid);
//					readerRepository.save(reader1.get());
//					return ResponseEntity.ok("Book Purchase Successful \n Please note the Payment Id for your reference\nPayment Id : "+paymentid);
//				}
				}
				else {
					return ResponseEntity.badRequest().body("Book is already purchased");
				}
			}
			else if(reader2.isEmpty()) {
				reader = new Reader();
				reader.setReadername(buybookrequest.getReadername());
				reader.setReaderemail(buybookrequest.getReaderemail());
				String paymentid="PID"+buybookrequest.getBookid()+"2022"+random.nextInt(10000);
				//buybookrequest.setPaymentid(paymentid);
				PurchasedBooks purchasedbook= new PurchasedBooks();
				purchasedbook.setBookid(buybookrequest.getBookid());
				purchasedbook.setReaderemail(buybookrequest.getReaderemail());
				purchasedbook.setPaymentid(paymentid);
				purchasedBookRepository.save(purchasedbook);
				readerRepository.save(reader);
				return ResponseEntity.ok("Book Purchase Successful \n Please note the Payment Id for your reference\nPayment Id : "+paymentid);
			}
			else {
				return ResponseEntity.badRequest().body("User/Email has already exists,\n Please Try with different one's");
			}
		}
		return ResponseEntity.badRequest().body("Invalid Book Id / Book not available");
	}
	/**
	 * Finding All Purchased Books by Reader email
	 * @param emailid
	 * @return
	 */
	@GetMapping("/readers/{emailid}/books")
	ResponseEntity<?> getPurchasedBooks(@PathVariable("emailid") String emailid){
		Optional<Reader> reader =readerRepository.findByreaderemail(emailid);
		if (reader.isPresent()) {
			List<Long> bookids = new ArrayList<>();
			String books=reader.get().getPurchasedbooks();
			if(!books.equals("")) {
				for(String bookid: books.split(",")) {
					bookids.add(Long.parseLong(bookid));
				}
				return ResponseEntity.ok(bookRepository.findAllById(bookids));
			}
			else {
				return ResponseEntity.badRequest().body("No Books Purchased");
			}
		}
		return ResponseEntity.badRequest().body("No books Purchased with this email");
	}
	/**
	 * Reader Can Read books by Email Id and Book Id
	 * @param emailid
	 * @param bookid
	 * @return
	 */
	@GetMapping("/readers/{emailid}/books/{bookid}")
	ResponseEntity<?> getBookContent(@PathVariable("emailid") String emailid,@PathVariable("bookid") Long bookid){
		Optional<Reader> reader =readerRepository.findByreaderemail(emailid);
		if (reader.isPresent()) {
			Optional<Book> book =bookRepository.findById(bookid);
			if(book.isPresent()) {
				for(String bookids: Arrays.asList(reader.get().getPurchasedbooks().split(","))) {
					if(!bookids.equals("") ) {
						if(bookid.toString().equals(bookids)) {
							return ResponseEntity.ok(book.get());
						}
					}
				}	
			}
			return new ResponseEntity<>("Unauthorised to read book",HttpStatus.NOT_FOUND);
		}
		return ResponseEntity.badRequest().body("Email Doesn't Exist");
	}
	/**
	 * Reader can read a book by payment Id
	 * @param emailid
	 * @param pid
	 * @return
	 */
	@PostMapping("/readers/{emailid}/books")
	ResponseEntity<?> getBookByPID(@PathVariable("emailid") String emailid,@RequestParam(required=true) String paymentid){
		Optional<Reader> reader =readerRepository.findByreaderemail(emailid);
		if (reader.isPresent()) {
			List<String> paymentids= Arrays.asList(reader.get().getPaymentid().split(","));
			List<String> bookids= Arrays.asList(reader.get().getPurchasedbooks().split(","));
			for(Integer index=0;index<paymentids.size();index++) {
				if(paymentid.equals(paymentids.get(index))) {
					return ResponseEntity.ok(bookRepository.findById(Long.parseLong(bookids.get(index))));
				}
			}	
			return new ResponseEntity<>("Invalid Payment ID",HttpStatus.NOT_FOUND);
			
		}
		return ResponseEntity.badRequest().body("Email Doesn't Exist");
	}
	/**
	 * Reader can return / ask for a refund
	 * @param emailid
	 * @param bookid
	 * @return
	 */
	@PostMapping("/readers/{emailid}/books/{bookid}/refund")
	ResponseEntity<?> getRefundBookByBookId(@PathVariable("emailid") String emailid,@PathVariable("bookid") Long bookid){
		Optional<Reader> reader =readerRepository.findByreaderemail(emailid);
		if (reader.isPresent()) {
			if(reader.get().getPurchasedbooks().contains(""+bookid)) {
				List<String> paymentids= Arrays.asList(reader.get().getPaymentid().split(","));
				List<String> bookids= Arrays.asList(reader.get().getPurchasedbooks().split(","));
				String pid= paymentids.get(bookids.indexOf(String.valueOf(bookid)));
				bookids=bookids.stream().filter(bid -> !bid.equals(String.valueOf(bookid))).collect(Collectors.toList());
				paymentids=paymentids.stream().filter(pidi -> !pidi.equals(pid)).collect(Collectors.toList());
				String pidlist=String.join(",", paymentids);
				String booklist=String.join(",", bookids);
				reader.get().setPaymentid(pidlist);
				reader.get().setPurchasedbooks(booklist);
				readerRepository.save(reader.get());
				return new ResponseEntity<>("Book Unpurchased, refund will be credited shortly",HttpStatus.OK);
			}
			return new ResponseEntity<>("Book Not purchased  to return",HttpStatus.NOT_FOUND);
		}
		return ResponseEntity.badRequest().body("Email Doesn't Exist");
	}
}
