package com.bookservice.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.MethodArgumentNotValidException;
import com.bookservice.entity.Author;
import com.bookservice.entity.Category;
import com.bookservice.entity.Book;
import com.bookservice.entity.Reader;
import com.bookservice.repository.AuthorRepository;
import com.bookservice.request.LoginRequest;

@ExtendWith(MockitoExtension.class)
class LoginControllerTest {
	
	@InjectMocks LoginController loginController;
	@InjectMocks BaseController baseController;
	@Mock AuthorRepository authorRepository;
	
	public static LoginRequest SampleLoginRequest() {
		LoginRequest loginrequest = new LoginRequest();
		loginrequest.setAuthorname("abc");
		loginrequest.setPassword("abc");
		return loginrequest;
	}
	
	public static Optional<Author> SampleAuthor() {
		Optional<Author> author = Optional.ofNullable(new Author());
		author.get().setId(Long.valueOf(1));
		author.get().setAuthorname("abc");
		author.get().setAuthoremail("abc@gmail.com");
		author.get().setLoginstatus(false);
		author.get().setPassword("abc");
		return author;
	}
	LoginRequest loginrequest= SampleLoginRequest();
	Optional<Author> author= SampleAuthor();
	/**
	 * SignIn Success Test Case
	 */
	@Test
	void testAuthenticateAuthorSignInSuccess() {
		when(authorRepository.findByAuthorname(loginrequest.getAuthorname())).thenReturn(author);
		assertEquals(loginController.authenticateAuthor(loginrequest),ResponseEntity.ok("Author Login Success"+author.get().getId()));
	}
	/**
	 * SignIn Fail By wrong author name
	 */
	@Test
	void testAuthenticateAuthorFailByWrongAuthorName() {
		author.get().setAuthorname("abcd");
		when(authorRepository.findByAuthorname(loginrequest.getAuthorname())).thenReturn(Optional.empty());
		assertEquals(loginController.authenticateAuthor(loginrequest),ResponseEntity.badRequest().body("Error: Invalid Credentials"));
	}
	/**
	 * SignIn Fail By author not found
	 */
	@Test
	void testAuthenticateAuthorFailByAuthorNameNotFound() {
		when(authorRepository.findByAuthorname(loginrequest.getAuthorname())).thenReturn(Optional.empty());
		assertEquals(loginController.authenticateAuthor(loginrequest),ResponseEntity.badRequest().body("Error: Invalid Credentials"));
	}
	/**
	 * SignIn Fail By Wrong Password
	 */
	@Test
	void testAuthenticateAuthorFailByInvalidPassword() {
		author.get().setPassword("abcd");//wrong password
		when(authorRepository.findByAuthorname(loginrequest.getAuthorname())).thenReturn(author);
		assertEquals(loginController.authenticateAuthor(loginrequest),ResponseEntity.badRequest().body("Error: Invalid Credentials"));
	}
	
	//----------------------Sign out ---------------------------------------------//
	
	/**
	 * Signout Success Case
	 */
	@Test
	void testSignoutAuthor() {
		Long authorid=author.get().getId();
		author.get().setLoginstatus(true);
		when(authorRepository.findById(authorid)).thenReturn(author);
		assertEquals(loginController.signoutAuthor(authorid),ResponseEntity.ok("Author Signout Success"));
		
		
		when(authorRepository.findById(authorid)).thenReturn(author);
		assertEquals(loginController.signoutAuthor(authorid),ResponseEntity.badRequest().body("Error: Please signin first, to signout"));
		
		when(authorRepository.findById(authorid)).thenReturn(Optional.empty());
		assertEquals(loginController.signoutAuthor(authorid),ResponseEntity.badRequest().body("Error: Please signin first, to signout"));
		

	}
	/**
	 * Signout Fail By Not LoggedIn
	 */
	@Test testSignoutAuthorFailByNotLoggedIn(){
		author.get().setLoginstatus(false);
		when(authorRepository.findById(authorid)).thenReturn(author);
		assertEquals(loginController.signoutAuthor(authorid),ResponseEntity.badRequest().body("Error: Please signin first, to signout"));
		
	}
//	
//	
//	@Test
//	void testRegisterUser() {
//		Optional<Author> author= SampleAuthor();
//		//when(emailValidation.ValidateEmail(author.get().getAuthoremail())).thenReturn(true);
//		when(authorRepository.existsByAuthorname(author.get().getAuthorname())).thenReturn(false);
//		when(authorRepository.existsByAuthoremail(author.get().getAuthoremail())).thenReturn(false);
//		assertEquals(loginController.signinAuthor(author.get()),ResponseEntity.ok("Author registered successfully! \n Your Author ID : "+author.get().getId()));
//		
//		when(authorRepository.existsByAuthorname(author.get().getAuthorname())).thenReturn(true);
//		assertEquals(loginController.signinAuthor(author.get()),ResponseEntity
//				.badRequest()
//				.body("Author Name is already in use !"));
//		
//		when(authorRepository.existsByAuthorname(author.get().getAuthorname())).thenReturn(false
//				);
//		when(authorRepository.existsByAuthoremail(author.get().getAuthoremail())).thenReturn(true);
//		assertEquals(loginController.signinAuthor(author.get()),ResponseEntity
//				.badRequest()
//				.body("Author Email is already in use!"));
//		
//		author.get().setAuthoremail("abc");
//		assertEquals(loginController.signinAuthor(author.get()),ResponseEntity.badRequest().body("Please Enter a Valid Email "));
//		
//		
//	}
//	
	

	

//	@Test
//	void testHandleException() {
////		LoginRequest loginrequest= SampleLoginRequest();
////		Optional<Author> author= SampleAuthor();
////		loginrequest.setAuthorname("");
////		BindingResult br=new BindingResult();
////		br.getAllErrors().
////		//when(authorRepository.findByAuthorname(loginrequest.getAuthorname())).thenThrow(new MethodArgumentNotValidException(null,null));
////		Map<String,String> map= new HashMap<String,String>();
////		map.put("authorname", "must not be blank");
////		
////		assertEquals(logincontroller.authenticateAuthor(loginrequest),map);
//	}
//
//	@Test
//	void testRequestParamNotFoundHttpMessageNotReadableException() {
//		assertEquals(ErrorController.)
//	}
//
//	@Test
//	void testRequestParamNotFoundMissingServletRequestParameterException() {
//		fail("Not yet implemented");
//	}

}
