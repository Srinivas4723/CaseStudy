package com.bookservice.entity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;

class AuthorTest {
	Author author1= new Author();
	Author author2= new Author();
	@Test
	void testHashCode() {				
					
		assertEquals(author1.hashCode(),author2.hashCode());
	}

	@Test
	void testGetId() {
		author1.setId(Long.valueOf(1));
		assertEquals(Long.valueOf(1),author1.getId());
	}

	@Test
	void testGetAuthorname() {
		fail("Not yet implemented");
	}

	@Test
	void testGetAuthoremail() {
		fail("Not yet implemented");
	}

	@Test
	void testGetPassword() {
		fail("Not yet implemented");
	}

	@Test
	void testIsLoginstatus() {
		fail("Not yet implemented");
	}

	@Test
	void testSetId() {
		fail("Not yet implemented");
	}

	@Test
	void testSetAuthorname() {
		fail("Not yet implemented");
	}

	@Test
	void testSetAuthoremail() {
		fail("Not yet implemented");
	}

	@Test
	void testSetPassword() {
		fail("Not yet implemented");
	}

	@Test
	void testSetLoginstatus() {
		fail("Not yet implemented");
	}

	@Test
	void testEqualsObject() {
		assertTrue(author1.equals(author2));
		author1.setAuthorname("abc");
		author2.setAuthorname("xyz");
		assertFalse(author1.equals(author2));
		assertFalse(author1.canEqual(author2));
	}

	@Test
	void testCanEqual() {
		fail("Not yet implemented");
	}

	@Test
	void testToString() {
		System.out.println(author1.toString());
		assertEquals(author1.toString(),author1.toString());
	}

	@Test
	void testAuthor() {
		fail("Not yet implemented");
	}

}
